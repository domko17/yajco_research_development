package yajco.example.imperative.parser.beaver;

import yajco.example.imperative.parser.beaver.SymbolListImpl;
import yajco.example.imperative.parser.beaver.SymbolWrapper;
import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "grammar.grammar".
 */
public class Parser extends beaver.Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short PLUS = 1;
		static public final short MINUS = 2;
		static public final short LPAR = 3;
		static public final short IDENT = 4;
		static public final short VALUE = 5;
		static public final short PLUSPLUS = 6;
		static public final short EXCL = 7;
		static public final short MINUSMINUS = 8;
		static public final short STAR = 9;
		static public final short SLASH = 10;
		static public final short PERC = 11;
		static public final short LT = 12;
		static public final short GT = 13;
		static public final short GTE = 14;
		static public final short LTE = 15;
		static public final short EQ = 16;
		static public final short NEQ = 17;
		static public final short AND = 18;
		static public final short OR = 19;
		static public final short QUESTION = 20;
		static public final short ASSIGN = 21;
		static public final short ASSIGNMOD = 22;
		static public final short ASSIGNDIV = 23;
		static public final short ASSIGNMUL = 24;
		static public final short ASSIGNSUB = 25;
		static public final short ASSIGNADD = 26;
		static public final short SEMICOLON = 27;
		static public final short LBR = 28;
		static public final short WHILE = 29;
		static public final short RPAR = 30;
		static public final short DO = 31;
		static public final short IF = 32;
		static public final short READ = 33;
		static public final short WRITE = 34;
		static public final short RETURN = 35;
		static public final short COMMA = 36;
		static public final short RBR = 37;
		static public final short COLON = 38;
		static public final short ELSE = 39;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pjLsbm54KOVRip4OC7XmWXnsA4O810GX93ieH001KKHH0ZYAWeYXg44Ci3F99$#Q5L$hJ" +
		"AFvubvHyiggGig#A98k291uSN8eAYeg9u86hxTkPBThuTs6rIPIYhThPUltuzt#jhUdjw07" +
		"SJ1c4mpiO8Z5Pf7l8n4gM8uIoCGnagK8XgrA0MSTHZWUUAuZxSWRlCFwRJofNmvE0aZnTXX" +
		"dWghRsBCGLNuqOinwtMdhjnBLfm9rOpP#DPuhdkHUBAyLBRbe2Rq7NPU9h5XUDo#PxM7dXw" +
		"qaxMSxoUYt4P6d01piTipC7bk0Mpq8Yfc8RfE0#vE1bzSGfEnMau7VtG7mDOxvLSQJUG5s8" +
		"5bk4w36I#JyXvLSYP6d5pneZRCaRS7ef87H4iIi8ZiYb9hSLc$lrQd40jskKUuwbbhZjzHF" +
		"gxgIF9wjxLyzMg3g$Nv3NpXFSrLP#X#dwcKaEK6gfKWL95IWrJgbYfuKgLA7MEKgEK6gFKM" +
		"ANAbHglL9LIvoerGQawfIOgDKcfoKfTfDGbIbsgr5obvYdLfDGrIbslr5AbLYhbxnF9D7pI" +
		"kWBtTA$62x4A4PwhShrTE9W6T#I1N2E3k386SptaSHNayzadN77EcCjv0kV3nfNm57Bj9RY" +
		"8UwZl6MdjBU0#wV1Nm5PjFQvuwYmz$iZA3IyKUgbbIuoC6RdiMpA1wpzhgSVjP3qzyN2rkT" +
		"vtHn#UlagvYutctbN67MiSzwaAxawLt9EgkHFLSF#fPRq5$5SKaOVn553CV#bmvaioEtif8" +
		"cL4x5l6al28h4fIQx6PVwyMzblL4l3K7#EfPQuxVKJ6kwaZoUfUr7fLXzPhuBbDEk5zJT$t" +
		"hFf$A$zztPqUvQGL2xpDH$07jBKpQVTFQ0L4SL97dkhAsm28FktLY#Wwqc7oy#I$oA$mPZL" +
		"vCpzPrvAtKcyZxoJk9tOJ3nFxfPw3mgp3NGSu4VApv5o$t1d0UxF8GychoSKip2UFebvA7a" +
		"$z4xcEO#XBRYHphCvCSWDv3da#UG7ZQjEFYMSvE8lP$kFa5lfQfGzjmXt23me$9Fn8O1uV2" +
		"CnHFoOnOXvZrf3d4d7nFCDacRJBBpddEN87FNbIzfXm4z4W#UMCUudSoRXYQMEwt5j1DBFl" +
		"Jv1R0cDQ6HmZdz4UUge2#a$skIFTl8JdoNbKU8tmMk7rmft26uIt26yLtY6yItYVy07XGy9" +
		"7V7QZmh8ctFx2GuHZmYN2PS9Lmd7BSKsL#CPacJj3UBPma$0YuIL7holoPA2EPdtFRKtHgy" +
		"IpFdt$t7Q9soYylUiUd#DUlmpnP3mM1l9jZ7e$aJ4Vc0rC$p2lcS$DP#PJyudvsEmqEynsi" +
		"yqFDRyJln67Y5#8duc31FzdvaVY1#80yJtn7V4jiL#yUmdk0UPbWclLl4YyuDtvndnjzfcl" +
		"p1xp9VlxbddNAttF$ChqRuAxXpb2S4MQmsQpUSUyQjv4u38RlVJ3RisznRpjvRPqbsqYtY2" +
		"#yDHkyn7JryqkYcdSFIFyeenozmoZdE$Aicv40daxb7g82782#GY$P1tlQtOYynKMg2EgwO" +
		"bxtyBWYJc7vmc7W7Ukg67v678bCO7bO$cMhsLCBT$pLKGzymsCuVx7KxV3zqOOK$u52BjLF" +
		"G==");

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			new Action() {	// [0] Number = VALUE.value
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_value = _symbols[offset + 1];
					final java.lang.String value = (java.lang.String) _symbol_value.value;
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.example.imperative.model.expression.Number(java.lang.Integer.valueOf(value)), (Object)java.lang.Integer.valueOf(value)));
				}
			},
			new Action() {	// [1] Program = FunctionArray1.functions Block.main
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_functions = _symbols[offset + 1];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.parser.beaver.SymbolListImpl<yajco.example.imperative.model.function.Function>> functions = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.parser.beaver.SymbolListImpl<yajco.example.imperative.model.function.Function>>) _symbol_functions.value;
					final Symbol _symbol_main = _symbols[offset + 2];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.statement.Block> main = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.statement.Block>) _symbol_main.value;
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.example.imperative.model.Program(functions.getWrappedObject().toArray(new yajco.example.imperative.model.function.Function[]{}), main.getWrappedObject()), (Object)functions.getWrappedObject().toArray(new yajco.example.imperative.model.function.Function[]{}), main.getWrappedObject()));
				}
			},
			new Action() {	// [2] UnaryOperation = PLUS Expression.expression
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expression = _symbols[offset + 2];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression> expression = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression>) _symbol_expression.value;
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.example.imperative.model.expression.arithmetic.UnaryPlus(expression.getWrappedObject()), (Object)expression.getWrappedObject()));
				}
			},
			new Action() {	// [3] UnaryOperation = PLUSPLUS Expression.expression
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expression = _symbols[offset + 2];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression> expression = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression>) _symbol_expression.value;
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.example.imperative.model.expression.assignment.PrefixIncrement(expression.getWrappedObject()), (Object)expression.getWrappedObject()));
				}
			},
			new Action() {	// [4] UnaryOperation = EXCL Expression.expression
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expression = _symbols[offset + 2];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression> expression = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression>) _symbol_expression.value;
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.example.imperative.model.expression.conditional.Not(expression.getWrappedObject()), (Object)expression.getWrappedObject()));
				}
			},
			new Action() {	// [5] UnaryOperation = MINUS Expression.expression
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expression = _symbols[offset + 2];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression> expression = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression>) _symbol_expression.value;
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.example.imperative.model.expression.arithmetic.UnaryMinus(expression.getWrappedObject()), (Object)expression.getWrappedObject()));
				}
			},
			new Action() {	// [6] UnaryOperation = MINUSMINUS Expression.expression
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expression = _symbols[offset + 2];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression> expression = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression>) _symbol_expression.value;
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.example.imperative.model.expression.assignment.PrefixDecrement(expression.getWrappedObject()), (Object)expression.getWrappedObject()));
				}
			},
			new Action() {	// [7] Block = LBR StatementArray3.statements RBR
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_statements = _symbols[offset + 2];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.parser.beaver.SymbolListImpl<yajco.example.imperative.model.statement.Statement>> statements = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.parser.beaver.SymbolListImpl<yajco.example.imperative.model.statement.Statement>>) _symbol_statements.value;
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.example.imperative.model.statement.Block(statements.getWrappedObject().toArray(new yajco.example.imperative.model.statement.Statement[]{})), (Object)statements.getWrappedObject().toArray(new yajco.example.imperative.model.statement.Statement[]{})));
				}
			},
			new Action() {	// [8] BinaryOperation = Expression.expression1 PLUS Expression.expression2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expression1 = _symbols[offset + 1];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression> expression1 = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression>) _symbol_expression1.value;
					final Symbol _symbol_expression2 = _symbols[offset + 3];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression> expression2 = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression>) _symbol_expression2.value;
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.example.imperative.model.expression.arithmetic.Add(expression1.getWrappedObject(), expression2.getWrappedObject()), (Object)expression1.getWrappedObject(), expression2.getWrappedObject()));
				}
			},
			new Action() {	// [9] BinaryOperation = Expression.expression1 MINUS Expression.expression2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expression1 = _symbols[offset + 1];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression> expression1 = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression>) _symbol_expression1.value;
					final Symbol _symbol_expression2 = _symbols[offset + 3];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression> expression2 = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression>) _symbol_expression2.value;
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.example.imperative.model.expression.arithmetic.Sub(expression1.getWrappedObject(), expression2.getWrappedObject()), (Object)expression1.getWrappedObject(), expression2.getWrappedObject()));
				}
			},
			new Action() {	// [10] BinaryOperation = AssignmentGeneric.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.assignment.AssignmentGeneric> val = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.assignment.AssignmentGeneric>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			},
			new Action() {	// [11] BinaryOperation = Expression.expression1 LT Expression.expression2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expression1 = _symbols[offset + 1];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression> expression1 = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression>) _symbol_expression1.value;
					final Symbol _symbol_expression2 = _symbols[offset + 3];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression> expression2 = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression>) _symbol_expression2.value;
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.example.imperative.model.expression.relational.LowerThan(expression1.getWrappedObject(), expression2.getWrappedObject()), (Object)expression1.getWrappedObject(), expression2.getWrappedObject()));
				}
			},
			new Action() {	// [12] BinaryOperation = Expression.expression1 GT Expression.expression2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expression1 = _symbols[offset + 1];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression> expression1 = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression>) _symbol_expression1.value;
					final Symbol _symbol_expression2 = _symbols[offset + 3];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression> expression2 = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression>) _symbol_expression2.value;
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.example.imperative.model.expression.relational.GreaterThan(expression1.getWrappedObject(), expression2.getWrappedObject()), (Object)expression1.getWrappedObject(), expression2.getWrappedObject()));
				}
			},
			new Action() {	// [13] BinaryOperation = Expression.expression1 ASSIGN Expression.expression2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expression1 = _symbols[offset + 1];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression> expression1 = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression>) _symbol_expression1.value;
					final Symbol _symbol_expression2 = _symbols[offset + 3];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression> expression2 = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression>) _symbol_expression2.value;
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.example.imperative.model.expression.assignment.Assignment(expression1.getWrappedObject(), expression2.getWrappedObject()), (Object)expression1.getWrappedObject(), expression2.getWrappedObject()));
				}
			},
			new Action() {	// [14] BinaryOperation = Expression.expression1 EQ Expression.expression2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expression1 = _symbols[offset + 1];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression> expression1 = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression>) _symbol_expression1.value;
					final Symbol _symbol_expression2 = _symbols[offset + 3];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression> expression2 = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression>) _symbol_expression2.value;
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.example.imperative.model.expression.relational.Equal(expression1.getWrappedObject(), expression2.getWrappedObject()), (Object)expression1.getWrappedObject(), expression2.getWrappedObject()));
				}
			},
			new Action() {	// [15] BinaryOperation = Expression.expression1 NEQ Expression.expression2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expression1 = _symbols[offset + 1];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression> expression1 = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression>) _symbol_expression1.value;
					final Symbol _symbol_expression2 = _symbols[offset + 3];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression> expression2 = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression>) _symbol_expression2.value;
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.example.imperative.model.expression.relational.NotEqual(expression1.getWrappedObject(), expression2.getWrappedObject()), (Object)expression1.getWrappedObject(), expression2.getWrappedObject()));
				}
			},
			new Action() {	// [16] BinaryOperation = Expression.expression1 STAR Expression.expression2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expression1 = _symbols[offset + 1];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression> expression1 = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression>) _symbol_expression1.value;
					final Symbol _symbol_expression2 = _symbols[offset + 3];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression> expression2 = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression>) _symbol_expression2.value;
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.example.imperative.model.expression.arithmetic.Mul(expression1.getWrappedObject(), expression2.getWrappedObject()), (Object)expression1.getWrappedObject(), expression2.getWrappedObject()));
				}
			},
			new Action() {	// [17] BinaryOperation = Expression.expression1 SLASH Expression.expression2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expression1 = _symbols[offset + 1];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression> expression1 = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression>) _symbol_expression1.value;
					final Symbol _symbol_expression2 = _symbols[offset + 3];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression> expression2 = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression>) _symbol_expression2.value;
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.example.imperative.model.expression.arithmetic.Div(expression1.getWrappedObject(), expression2.getWrappedObject()), (Object)expression1.getWrappedObject(), expression2.getWrappedObject()));
				}
			},
			new Action() {	// [18] BinaryOperation = Expression.expression1 GTE Expression.expression2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expression1 = _symbols[offset + 1];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression> expression1 = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression>) _symbol_expression1.value;
					final Symbol _symbol_expression2 = _symbols[offset + 3];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression> expression2 = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression>) _symbol_expression2.value;
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.example.imperative.model.expression.relational.GreaterThanOrEqual(expression1.getWrappedObject(), expression2.getWrappedObject()), (Object)expression1.getWrappedObject(), expression2.getWrappedObject()));
				}
			},
			new Action() {	// [19] BinaryOperation = Expression.expression1 LTE Expression.expression2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expression1 = _symbols[offset + 1];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression> expression1 = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression>) _symbol_expression1.value;
					final Symbol _symbol_expression2 = _symbols[offset + 3];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression> expression2 = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression>) _symbol_expression2.value;
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.example.imperative.model.expression.relational.LowerThanOrEqual(expression1.getWrappedObject(), expression2.getWrappedObject()), (Object)expression1.getWrappedObject(), expression2.getWrappedObject()));
				}
			},
			new Action() {	// [20] BinaryOperation = Expression.expression1 PERC Expression.expression2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expression1 = _symbols[offset + 1];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression> expression1 = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression>) _symbol_expression1.value;
					final Symbol _symbol_expression2 = _symbols[offset + 3];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression> expression2 = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression>) _symbol_expression2.value;
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.example.imperative.model.expression.arithmetic.Mod(expression1.getWrappedObject(), expression2.getWrappedObject()), (Object)expression1.getWrappedObject(), expression2.getWrappedObject()));
				}
			},
			new Action() {	// [21] BinaryOperation = Expression.expression1 OR Expression.expression2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expression1 = _symbols[offset + 1];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression> expression1 = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression>) _symbol_expression1.value;
					final Symbol _symbol_expression2 = _symbols[offset + 3];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression> expression2 = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression>) _symbol_expression2.value;
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.example.imperative.model.expression.conditional.Or(expression1.getWrappedObject(), expression2.getWrappedObject()), (Object)expression1.getWrappedObject(), expression2.getWrappedObject()));
				}
			},
			new Action() {	// [22] BinaryOperation = Expression.expression1 AND Expression.expression2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expression1 = _symbols[offset + 1];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression> expression1 = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression>) _symbol_expression1.value;
					final Symbol _symbol_expression2 = _symbols[offset + 3];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression> expression2 = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression>) _symbol_expression2.value;
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.example.imperative.model.expression.conditional.And(expression1.getWrappedObject(), expression2.getWrappedObject()), (Object)expression1.getWrappedObject(), expression2.getWrappedObject()));
				}
			},
			new Action() {	// [23] Expression = LPAR Expression.val RPAR
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 2];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression> val = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			},
			new Action() {	// [24] Expression = Number.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Number> val = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Number>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			},
			new Action() {	// [25] Expression = Variable.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Variable> val = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Variable>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			},
			new Action() {	// [26] Expression = Expression.expression1 QUESTION Expression.expression2 COLON Expression.expression3
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expression1 = _symbols[offset + 1];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression> expression1 = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression>) _symbol_expression1.value;
					final Symbol _symbol_expression2 = _symbols[offset + 3];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression> expression2 = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression>) _symbol_expression2.value;
					final Symbol _symbol_expression3 = _symbols[offset + 5];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression> expression3 = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression>) _symbol_expression3.value;
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.example.imperative.model.expression.conditional.Conditional(expression1.getWrappedObject(), expression2.getWrappedObject(), expression3.getWrappedObject()), (Object)expression1.getWrappedObject(), expression2.getWrappedObject(), expression3.getWrappedObject()));
				}
			},
			new Action() {	// [27] Expression = BinaryOperation.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.BinaryOperation> val = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.BinaryOperation>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			},
			new Action() {	// [28] Expression = FunctionCall.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.function.FunctionCall> val = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.function.FunctionCall>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			},
			new Action() {	// [29] Expression = UnaryOperation.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.UnaryOperation> val = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.UnaryOperation>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			},
			new Action() {	// [30] ParameterArray2 = ParameterArray2.list COMMA Parameter.elem
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.parser.beaver.SymbolListImpl<yajco.example.imperative.model.function.Parameter>> list = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.parser.beaver.SymbolListImpl<yajco.example.imperative.model.function.Parameter>>) _symbol_list.value;
					final Symbol _symbol_elem = _symbols[offset + 3];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.function.Parameter> elem = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.function.Parameter>) _symbol_elem.value;
					 list.getWrappedObject().add(elem.getWrappedObject()); return (Symbol) new SymbolWrapper(list.getWrappedObject());
				}
			},
			new Action() {	// [31] ParameterArray2 = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return (Symbol) new SymbolWrapper(new SymbolListImpl<yajco.example.imperative.model.function.Parameter>());
				}
			},
			new Action() {	// [32] ParameterArray2 = Parameter.elem
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_elem = _symbols[offset + 1];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.function.Parameter> elem = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.function.Parameter>) _symbol_elem.value;
					 java.util.List<yajco.example.imperative.model.function.Parameter> list = null; list = new SymbolListImpl<yajco.example.imperative.model.function.Parameter>(); list.add(elem.getWrappedObject()); return (Symbol) new SymbolWrapper(list);
				}
			},
			new Action() {	// [33] Statement = Block.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.statement.Block> val = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.statement.Block>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			},
			new Action() {	// [34] Statement = ReturnFunction.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.function.ReturnFunction> val = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.function.ReturnFunction>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			},
			new Action() {	// [35] Statement = EmptyStatement.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.statement.EmptyStatement> val = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.statement.EmptyStatement>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			},
			new Action() {	// [36] Statement = DoWhile.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.statement.DoWhile> val = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.statement.DoWhile>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			},
			new Action() {	// [37] Statement = Write.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.statement.Write> val = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.statement.Write>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			},
			new Action() {	// [38] Statement = WhileStatement.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.statement.WhileStatement> val = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.statement.WhileStatement>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			},
			new Action() {	// [39] Statement = ExpressionStatement.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.statement.ExpressionStatement> val = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.statement.ExpressionStatement>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			},
			new Action() {	// [40] Statement = Read.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.statement.Read> val = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.statement.Read>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			},
			new Action() {	// [41] Statement = Condition.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.statement.Condition> val = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.statement.Condition>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			},
			new Action() {	// [42] Parameter = IDENT.ident
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_ident = _symbols[offset + 1];
					final java.lang.String ident = (java.lang.String) _symbol_ident.value;
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.example.imperative.model.function.Parameter(ident), (Object)ident));
				}
			},
			new Action() {	// [43] Write = WRITE Expression.expression SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expression = _symbols[offset + 2];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression> expression = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression>) _symbol_expression.value;
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.example.imperative.model.statement.Write(expression.getWrappedObject()), (Object)expression.getWrappedObject()));
				}
			},
			new Action() {	// [44] FunctionArray1 = FunctionArray1.list Function.elem
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.parser.beaver.SymbolListImpl<yajco.example.imperative.model.function.Function>> list = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.parser.beaver.SymbolListImpl<yajco.example.imperative.model.function.Function>>) _symbol_list.value;
					final Symbol _symbol_elem = _symbols[offset + 2];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.function.Function> elem = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.function.Function>) _symbol_elem.value;
					 list.getWrappedObject().add(elem.getWrappedObject()); return (Symbol) new SymbolWrapper(list.getWrappedObject());
				}
			},
			new Action() {	// [45] FunctionArray1 = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return (Symbol) new SymbolWrapper(new SymbolListImpl<yajco.example.imperative.model.function.Function>());
				}
			},
			new Action() {	// [46] WhileStatement = WHILE LPAR Expression.expression RPAR Statement.statement
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expression = _symbols[offset + 3];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression> expression = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression>) _symbol_expression.value;
					final Symbol _symbol_statement = _symbols[offset + 5];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.statement.Statement> statement = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.statement.Statement>) _symbol_statement.value;
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.example.imperative.model.statement.WhileStatement(expression.getWrappedObject(), statement.getWrappedObject()), (Object)expression.getWrappedObject(), statement.getWrappedObject()));
				}
			},
			new Action() {	// [47] ExpressionArray4 = ExpressionArray4.list COMMA Expression.elem
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.parser.beaver.SymbolListImpl<yajco.example.imperative.model.expression.Expression>> list = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.parser.beaver.SymbolListImpl<yajco.example.imperative.model.expression.Expression>>) _symbol_list.value;
					final Symbol _symbol_elem = _symbols[offset + 3];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression> elem = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression>) _symbol_elem.value;
					 list.getWrappedObject().add(elem.getWrappedObject()); return (Symbol) new SymbolWrapper(list.getWrappedObject());
				}
			},
			new Action() {	// [48] ExpressionArray4 = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return (Symbol) new SymbolWrapper(new SymbolListImpl<yajco.example.imperative.model.expression.Expression>());
				}
			},
			new Action() {	// [49] ExpressionArray4 = Expression.elem
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_elem = _symbols[offset + 1];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression> elem = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression>) _symbol_elem.value;
					 java.util.List<yajco.example.imperative.model.expression.Expression> list = null; list = new SymbolListImpl<yajco.example.imperative.model.expression.Expression>(); list.add(elem.getWrappedObject()); return (Symbol) new SymbolWrapper(list);
				}
			},
			new Action() {	// [50] ExpressionStatement = Expression.expression SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expression = _symbols[offset + 1];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression> expression = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression>) _symbol_expression.value;
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.example.imperative.model.statement.ExpressionStatement(expression.getWrappedObject()), (Object)expression.getWrappedObject()));
				}
			},
			new Action() {	// [51] Variable = IDENT.ident
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_ident = _symbols[offset + 1];
					final java.lang.String ident = (java.lang.String) _symbol_ident.value;
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.example.imperative.model.expression.Variable(ident), (Object)ident));
				}
			},
			new Action() {	// [52] EmptyStatement = SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.example.imperative.model.statement.EmptyStatement()));
				}
			},
			new Action() {	// [53] Read = READ IDENT.ident SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_ident = _symbols[offset + 2];
					final java.lang.String ident = (java.lang.String) _symbol_ident.value;
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.example.imperative.model.statement.Read(ident), (Object)ident));
				}
			},
			new Action() {	// [54] FunctionCall = IDENT.ident LPAR ExpressionArray4.expressions RPAR
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_ident = _symbols[offset + 1];
					final java.lang.String ident = (java.lang.String) _symbol_ident.value;
					final Symbol _symbol_expressions = _symbols[offset + 3];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.parser.beaver.SymbolListImpl<yajco.example.imperative.model.expression.Expression>> expressions = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.parser.beaver.SymbolListImpl<yajco.example.imperative.model.expression.Expression>>) _symbol_expressions.value;
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.example.imperative.model.function.FunctionCall(ident, expressions.getWrappedObject().toArray(new yajco.example.imperative.model.expression.Expression[]{})), (Object)ident, expressions.getWrappedObject().toArray(new yajco.example.imperative.model.expression.Expression[]{})));
				}
			},
			new Action() {	// [55] Condition = IF LPAR Expression.expression RPAR Statement.trueStatement
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expression = _symbols[offset + 3];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression> expression = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression>) _symbol_expression.value;
					final Symbol _symbol_trueStatement = _symbols[offset + 5];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.statement.Statement> trueStatement = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.statement.Statement>) _symbol_trueStatement.value;
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.example.imperative.model.statement.Condition(expression.getWrappedObject(), trueStatement.getWrappedObject()), (Object)expression.getWrappedObject(), trueStatement.getWrappedObject()));
				}
			},
			new Action() {	// [56] Condition = IF LPAR Expression.expression RPAR Statement.trueStatement ELSE Statement.falseStatement
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expression = _symbols[offset + 3];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression> expression = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression>) _symbol_expression.value;
					final Symbol _symbol_trueStatement = _symbols[offset + 5];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.statement.Statement> trueStatement = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.statement.Statement>) _symbol_trueStatement.value;
					final Symbol _symbol_falseStatement = _symbols[offset + 7];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.statement.Statement> falseStatement = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.statement.Statement>) _symbol_falseStatement.value;
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.example.imperative.model.statement.Condition(expression.getWrappedObject(), trueStatement.getWrappedObject(), falseStatement.getWrappedObject()), (Object)expression.getWrappedObject(), trueStatement.getWrappedObject(), falseStatement.getWrappedObject()));
				}
			},
			new Action() {	// [57] DoWhile = DO Statement.statement WHILE LPAR Expression.expression RPAR SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_statement = _symbols[offset + 2];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.statement.Statement> statement = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.statement.Statement>) _symbol_statement.value;
					final Symbol _symbol_expression = _symbols[offset + 5];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression> expression = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression>) _symbol_expression.value;
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.example.imperative.model.statement.DoWhile(statement.getWrappedObject(), expression.getWrappedObject()), (Object)statement.getWrappedObject(), expression.getWrappedObject()));
				}
			},
			new Action() {	// [58] Function = IDENT.ident LPAR ParameterArray2.parameters RPAR Block.body
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_ident = _symbols[offset + 1];
					final java.lang.String ident = (java.lang.String) _symbol_ident.value;
					final Symbol _symbol_parameters = _symbols[offset + 3];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.parser.beaver.SymbolListImpl<yajco.example.imperative.model.function.Parameter>> parameters = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.parser.beaver.SymbolListImpl<yajco.example.imperative.model.function.Parameter>>) _symbol_parameters.value;
					final Symbol _symbol_body = _symbols[offset + 5];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.statement.Block> body = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.statement.Block>) _symbol_body.value;
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.example.imperative.model.function.Function(ident, parameters.getWrappedObject().toArray(new yajco.example.imperative.model.function.Parameter[]{}), body.getWrappedObject()), (Object)ident, parameters.getWrappedObject().toArray(new yajco.example.imperative.model.function.Parameter[]{}), body.getWrappedObject()));
				}
			},
			new Action() {	// [59] StatementArray3 = StatementArray3.list Statement.elem
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.parser.beaver.SymbolListImpl<yajco.example.imperative.model.statement.Statement>> list = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.parser.beaver.SymbolListImpl<yajco.example.imperative.model.statement.Statement>>) _symbol_list.value;
					final Symbol _symbol_elem = _symbols[offset + 2];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.statement.Statement> elem = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.statement.Statement>) _symbol_elem.value;
					 list.getWrappedObject().add(elem.getWrappedObject()); return (Symbol) new SymbolWrapper(list.getWrappedObject());
				}
			},
			new Action() {	// [60] StatementArray3 = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return (Symbol) new SymbolWrapper(new SymbolListImpl<yajco.example.imperative.model.statement.Statement>());
				}
			},
			new Action() {	// [61] ReturnFunction = RETURN Expression.expression SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expression = _symbols[offset + 2];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression> expression = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression>) _symbol_expression.value;
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.example.imperative.model.function.ReturnFunction(expression.getWrappedObject()), (Object)expression.getWrappedObject()));
				}
			},
			new Action() {	// [62] AssignmentGeneric = Expression.expression1 ASSIGNMOD Expression.expression2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expression1 = _symbols[offset + 1];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression> expression1 = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression>) _symbol_expression1.value;
					final Symbol _symbol_expression2 = _symbols[offset + 3];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression> expression2 = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression>) _symbol_expression2.value;
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.example.imperative.model.expression.assignment.AssignmentMod(expression1.getWrappedObject(), expression2.getWrappedObject()), (Object)expression1.getWrappedObject(), expression2.getWrappedObject()));
				}
			},
			new Action() {	// [63] AssignmentGeneric = Expression.expression1 ASSIGNDIV Expression.expression2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expression1 = _symbols[offset + 1];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression> expression1 = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression>) _symbol_expression1.value;
					final Symbol _symbol_expression2 = _symbols[offset + 3];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression> expression2 = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression>) _symbol_expression2.value;
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.example.imperative.model.expression.assignment.AssignmentDiv(expression1.getWrappedObject(), expression2.getWrappedObject()), (Object)expression1.getWrappedObject(), expression2.getWrappedObject()));
				}
			},
			new Action() {	// [64] AssignmentGeneric = Expression.expression1 ASSIGNMUL Expression.expression2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expression1 = _symbols[offset + 1];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression> expression1 = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression>) _symbol_expression1.value;
					final Symbol _symbol_expression2 = _symbols[offset + 3];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression> expression2 = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression>) _symbol_expression2.value;
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.example.imperative.model.expression.assignment.AssignmentMul(expression1.getWrappedObject(), expression2.getWrappedObject()), (Object)expression1.getWrappedObject(), expression2.getWrappedObject()));
				}
			},
			new Action() {	// [65] AssignmentGeneric = Expression.expression1 ASSIGNSUB Expression.expression2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expression1 = _symbols[offset + 1];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression> expression1 = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression>) _symbol_expression1.value;
					final Symbol _symbol_expression2 = _symbols[offset + 3];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression> expression2 = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression>) _symbol_expression2.value;
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.example.imperative.model.expression.assignment.AssignmentSub(expression1.getWrappedObject(), expression2.getWrappedObject()), (Object)expression1.getWrappedObject(), expression2.getWrappedObject()));
				}
			},
			new Action() {	// [66] AssignmentGeneric = Expression.expression1 ASSIGNADD Expression.expression2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expression1 = _symbols[offset + 1];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression> expression1 = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression>) _symbol_expression1.value;
					final Symbol _symbol_expression2 = _symbols[offset + 3];
					final yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression> expression2 = (yajco.example.imperative.parser.beaver.SymbolWrapper<yajco.example.imperative.model.expression.Expression>) _symbol_expression2.value;
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.example.imperative.model.expression.assignment.AssignmentAdd(expression1.getWrappedObject(), expression2.getWrappedObject()), (Object)expression1.getWrappedObject(), expression2.getWrappedObject()));
				}
			}
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}

package yajco.robot.karel.parser.beaver;

import beaver.*;
import yajco.robot.karel.parser.beaver.SymbolListImpl;
import yajco.robot.karel.parser.beaver.SymbolWrapper;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "grammar.grammar".
 */
public class Parser extends beaver.Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short IDENT = 1;
		static public final short SYMBOLIF = 2;
		static public final short SYMBOLITERATE = 3;
		static public final short SYMBOLBEGIN = 4;
		static public final short SYMBOLWHILE = 5;
		static public final short SYMBOLMOVE = 6;
		static public final short SYMBOLPICKBEEPER = 7;
		static public final short SYMBOLPUTBEEPER = 8;
		static public final short SYMBOLTURNLEFT = 9;
		static public final short SYMBOLTURNOFF = 10;
		static public final short SYMBOLFRONT_45_IS_45_BLOCKED = 11;
		static public final short SYMBOLLEFT_45_IS_45_CLEAR = 12;
		static public final short SYMBOLRIGHT_45_IS_45_CLEAR = 13;
		static public final short SYMBOLNOT_45_FACING_45_WEST = 14;
		static public final short SYMBOLLEFT_45_IS_45_BLOCKED = 15;
		static public final short SYMBOLNOT_45_NEXT_45_TO_45_A_45_BEEPER = 16;
		static public final short SYMBOLNOT_45_FACING_45_SOUTH = 17;
		static public final short SYMBOLFRONT_45_IS_45_CLEAR = 18;
		static public final short SYMBOLNO_45_BEEPERS_45_IN_45_BEEPER_45_BAG = 19;
		static public final short SYMBOLBACK_45_IS_45_CLEAR = 20;
		static public final short SYMBOLNOT_45_FACING_45_NORTH = 21;
		static public final short SYMBOLNOT_45_FACING_45_EAST = 22;
		static public final short SYMBOLNEXT_45_TO_45_A_45_BEEPER = 23;
		static public final short SYMBOLBACK_45_IS_45_BLOCKED = 24;
		static public final short SYMBOLANY_45_BEEPERS_45_IN_45_BEEPER_45_BAG = 25;
		static public final short SYMBOLFACING_45_WEST = 26;
		static public final short SYMBOLFACING_45_SOUTH = 27;
		static public final short SYMBOLFACING_45_NORTH = 28;
		static public final short SYMBOLFACING_45_EAST = 29;
		static public final short SYMBOLRIGHT_45_IS_45_BLOCKED = 30;
		static public final short SYMBOLBEGINNING_45_OF_45_PROGRAM = 31;
		static public final short SYMBOLBEGINNING_45_OF_45_EXECUTION = 32;
		static public final short SYMBOLEND_45_OF_45_EXECUTION = 33;
		static public final short SYMBOLEND_45_OF_45_PROGRAM = 34;
		static public final short SYMBOLDEFINE = 35;
		static public final short SYMBOLAS = 36;
		static public final short SYMBOLTHEN = 37;
		static public final short SYMBOLELSE = 38;
		static public final short VALUE = 39;
		static public final short SYMBOLTIMES = 40;
		static public final short SYMBOLEND = 41;
		static public final short SYMBOLDO = 42;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pLbETM544GXUy8Y8eY8Y96O0L1aAX8M8B24XQ1NHOnyiS7y07yvnyVm8Vm7SmHHSH0D64" +
		"20vXpmd2zeoEYCCjoE1wrp$cckc$NTCzqLHTWP68kfc0bqf2E36GY2wkm6ZbOWrpa8Hy5A4" +
		"GHYb62jLY7KfGXdlicv5#9MbJ1X$KenmPKmmKtFAX3DYhWH2Eyg4S3QWBssuZfc84mpCGiB" +
		"CGYBCOIB4KiWX1YExS9sp3DPcwEZJxFHbzWeo#pqHDjTBllIKOSeX6EIAp0SgGY2Ia1Qw7i" +
		"mzGnPu8n6r7OZFb8W0CHazebK2q6Mx1LUH7xBI#SepB3fKXNAEvLYdIrubwZ3AYJlsz2$jz" +
		"FC5p$5w5OHYgVenIxQFrfZ6BrysG3zKlz9RkpX$FRg$oscwltC$UlwORkUv3o8KIP4cfbOQ" +
		"2Q0q3yc3DnkgifkWD9YdwYSc0okmIg9KjDq1SrxTA3PBzfrRf4hsWHpMB0rErGwnZHJnHjO" +
		"j0QjmD6YEpGE6laYsxv1ijsoeRxy$$VqF#aYJ0H8nocflCsppSAPaP0cGQunry7UqNZZx7M" +
		"QBNqxR$vxV2tZjxhi$nsMdRttpYNFusQK#mHJUQ0NHXklCbtVCitVCrNVARn49zRCzSjUun" +
		"7U9Y7U907k7$4c$TubPTqXX$Pmyjyn8Tym44Ey3vlivCTRET5Nk1vdcCRUtcMhJp35fxcAJ" +
		"Rp91$p1M$n2p$mBf$m9O$o4$jvXrTuWkzvd4zvZJVORUtrMOzArHv3LTnGdGnM1JTKYGnLf" +
		"o3LTKDrt52j6erB50kFRhv7gzIgNoQAHAuDcQeEfR9LebBuDCwNBH5vMYTFDatVu9Ij4rd2" +
		"BSogc2roX5T#NkrNeBu$2iUXMjI8TErNBfjXGyDNMSjLbm==");

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			new Action() {	// [0] Call = IDENT.ident
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_ident = _symbols[offset + 1];
					final java.lang.String ident = (java.lang.String) _symbol_ident.value;
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.robot.karel.model.instruction.Call(ident), (Object)ident));
				}
			},
			new Action() {	// [1] FrontIsBlocked = SYMBOLFRONT_45_IS_45_BLOCKED
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.robot.karel.model.condition.obstacle.FrontIsBlocked()));
				}
			},
			new Action() {	// [2] Definition = SYMBOLDEFINE IDENT.ident SYMBOLAS StatementArray2.statements
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_ident = _symbols[offset + 2];
					final java.lang.String ident = (java.lang.String) _symbol_ident.value;
					final Symbol _symbol_statements = _symbols[offset + 4];
					final yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.parser.beaver.SymbolListImpl<yajco.robot.karel.model.Statement>> statements = (yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.parser.beaver.SymbolListImpl<yajco.robot.karel.model.Statement>>) _symbol_statements.value;
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.robot.karel.model.Definition(ident, statements.getWrappedObject().toArray(new yajco.robot.karel.model.Statement[]{})), (Object)ident, statements.getWrappedObject().toArray(new yajco.robot.karel.model.Statement[]{})));
				}
			},
			new Action() {	// [3] LeftIsClear = SYMBOLLEFT_45_IS_45_CLEAR
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.robot.karel.model.condition.obstacle.LeftIsClear()));
				}
			},
			new Action() {	// [4] Move = SYMBOLMOVE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.robot.karel.model.instruction.Move()));
				}
			},
			new Action() {	// [5] Block = SYMBOLBEGIN StatementArray3.statements SYMBOLEND
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_statements = _symbols[offset + 2];
					final yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.parser.beaver.SymbolListImpl<yajco.robot.karel.model.Statement>> statements = (yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.parser.beaver.SymbolListImpl<yajco.robot.karel.model.Statement>>) _symbol_statements.value;
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.robot.karel.model.statement.Block(statements.getWrappedObject().toArray(new yajco.robot.karel.model.Statement[]{})), (Object)statements.getWrappedObject().toArray(new yajco.robot.karel.model.Statement[]{})));
				}
			},
			new Action() {	// [6] RightIsClear = SYMBOLRIGHT_45_IS_45_CLEAR
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.robot.karel.model.condition.obstacle.RightIsClear()));
				}
			},
			new Action() {	// [7] NotFacingWest = SYMBOLNOT_45_FACING_45_WEST
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.robot.karel.model.condition.facing.NotFacingWest()));
				}
			},
			new Action() {	// [8] Statement = Block.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.statement.Block> val = (yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.statement.Block>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			},
			new Action() {	// [9] Statement = Loop.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.statement.Loop> val = (yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.statement.Loop>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			},
			new Action() {	// [10] Statement = Iteration.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.statement.Iteration> val = (yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.statement.Iteration>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			},
			new Action() {	// [11] Statement = Instruction.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.Instruction> val = (yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.Instruction>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			},
			new Action() {	// [12] Statement = Conditional.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.statement.Conditional> val = (yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.statement.Conditional>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			},
			new Action() {	// [13] LeftIsBlocked = SYMBOLLEFT_45_IS_45_BLOCKED
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.robot.karel.model.condition.obstacle.LeftIsBlocked()));
				}
			},
			new Action() {	// [14] NotNextToABeeper = SYMBOLNOT_45_NEXT_45_TO_45_A_45_BEEPER
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.robot.karel.model.condition.beeper.NotNextToABeeper()));
				}
			},
			new Action() {	// [15] StatementArray3 = StatementArray3.list Statement.elem
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.parser.beaver.SymbolListImpl<yajco.robot.karel.model.Statement>> list = (yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.parser.beaver.SymbolListImpl<yajco.robot.karel.model.Statement>>) _symbol_list.value;
					final Symbol _symbol_elem = _symbols[offset + 2];
					final yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.Statement> elem = (yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.Statement>) _symbol_elem.value;
					 list.getWrappedObject().add(elem.getWrappedObject()); return (Symbol) new SymbolWrapper(list.getWrappedObject());
				}
			},
			new Action() {	// [16] StatementArray3 = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return (Symbol) new SymbolWrapper(new SymbolListImpl<yajco.robot.karel.model.Statement>());
				}
			},
			new Action() {	// [17] NotFacingSouth = SYMBOLNOT_45_FACING_45_SOUTH
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.robot.karel.model.condition.facing.NotFacingSouth()));
				}
			},
			new Action() {	// [18] FrontIsClear = SYMBOLFRONT_45_IS_45_CLEAR
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.robot.karel.model.condition.obstacle.FrontIsClear()));
				}
			},
			new Action() {	// [19] NoBeepersInBeeperBag = SYMBOLNO_45_BEEPERS_45_IN_45_BEEPER_45_BAG
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.robot.karel.model.condition.beeper.NoBeepersInBeeperBag()));
				}
			},
			new Action() {	// [20] Condition = NextToABeeper.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.condition.beeper.NextToABeeper> val = (yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.condition.beeper.NextToABeeper>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			},
			new Action() {	// [21] Condition = Obstacle.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.condition.obstacle.Obstacle> val = (yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.condition.obstacle.Obstacle>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			},
			new Action() {	// [22] Condition = AnyBeepersInBeeperBag.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.condition.beeper.AnyBeepersInBeeperBag> val = (yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.condition.beeper.AnyBeepersInBeeperBag>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			},
			new Action() {	// [23] Condition = Facing.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.condition.facing.Facing> val = (yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.condition.facing.Facing>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			},
			new Action() {	// [24] Condition = NoBeepersInBeeperBag.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.condition.beeper.NoBeepersInBeeperBag> val = (yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.condition.beeper.NoBeepersInBeeperBag>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			},
			new Action() {	// [25] Condition = NotNextToABeeper.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.condition.beeper.NotNextToABeeper> val = (yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.condition.beeper.NotNextToABeeper>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			},
			new Action() {	// [26] Conditional = SYMBOLIF Condition.condition SYMBOLTHEN Statement.statement SYMBOLELSE Statement.elseStatement
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_condition = _symbols[offset + 2];
					final yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.Condition> condition = (yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.Condition>) _symbol_condition.value;
					final Symbol _symbol_statement = _symbols[offset + 4];
					final yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.Statement> statement = (yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.Statement>) _symbol_statement.value;
					final Symbol _symbol_elseStatement = _symbols[offset + 6];
					final yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.Statement> elseStatement = (yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.Statement>) _symbol_elseStatement.value;
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.robot.karel.model.statement.Conditional(condition.getWrappedObject(), statement.getWrappedObject(), elseStatement.getWrappedObject()), (Object)condition.getWrappedObject(), statement.getWrappedObject(), elseStatement.getWrappedObject()));
				}
			},
			new Action() {	// [27] BackIsClear = SYMBOLBACK_45_IS_45_CLEAR
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.robot.karel.model.condition.obstacle.BackIsClear()));
				}
			},
			new Action() {	// [28] NotFacingNorth = SYMBOLNOT_45_FACING_45_NORTH
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.robot.karel.model.condition.facing.NotFacingNorth()));
				}
			},
			new Action() {	// [29] NotFacingEast = SYMBOLNOT_45_FACING_45_EAST
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.robot.karel.model.condition.facing.NotFacingEast()));
				}
			},
			new Action() {	// [30] Program = SYMBOLBEGINNING_45_OF_45_PROGRAM DefinitionArray1.definitions SYMBOLBEGINNING_45_OF_45_EXECUTION StatementArray2.statements SYMBOLEND_45_OF_45_EXECUTION SYMBOLEND_45_OF_45_PROGRAM
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_definitions = _symbols[offset + 2];
					final yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.parser.beaver.SymbolListImpl<yajco.robot.karel.model.Definition>> definitions = (yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.parser.beaver.SymbolListImpl<yajco.robot.karel.model.Definition>>) _symbol_definitions.value;
					final Symbol _symbol_statements = _symbols[offset + 4];
					final yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.parser.beaver.SymbolListImpl<yajco.robot.karel.model.Statement>> statements = (yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.parser.beaver.SymbolListImpl<yajco.robot.karel.model.Statement>>) _symbol_statements.value;
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.robot.karel.model.Program(definitions.getWrappedObject().toArray(new yajco.robot.karel.model.Definition[]{}), statements.getWrappedObject().toArray(new yajco.robot.karel.model.Statement[]{})), (Object)definitions.getWrappedObject().toArray(new yajco.robot.karel.model.Definition[]{}), statements.getWrappedObject().toArray(new yajco.robot.karel.model.Statement[]{})));
				}
			},
			new Action() {	// [31] NextToABeeper = SYMBOLNEXT_45_TO_45_A_45_BEEPER
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.robot.karel.model.condition.beeper.NextToABeeper()));
				}
			},
			new Action() {	// [32] BackIsBlocked = SYMBOLBACK_45_IS_45_BLOCKED
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.robot.karel.model.condition.obstacle.BackIsBlocked()));
				}
			},
			new Action() {	// [33] StatementArray2 = StatementArray2.list Statement.elem
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.parser.beaver.SymbolListImpl<yajco.robot.karel.model.Statement>> list = (yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.parser.beaver.SymbolListImpl<yajco.robot.karel.model.Statement>>) _symbol_list.value;
					final Symbol _symbol_elem = _symbols[offset + 2];
					final yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.Statement> elem = (yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.Statement>) _symbol_elem.value;
					 list.getWrappedObject().add(elem.getWrappedObject()); return (Symbol) new SymbolWrapper(list.getWrappedObject());
				}
			},
			new Action() {	// [34] StatementArray2 = Statement.elem
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_elem = _symbols[offset + 1];
					final yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.Statement> elem = (yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.Statement>) _symbol_elem.value;
					 java.util.List<yajco.robot.karel.model.Statement> list = null; list = new SymbolListImpl<yajco.robot.karel.model.Statement>(); list.add(elem.getWrappedObject()); return (Symbol) new SymbolWrapper(list);
				}
			},
			new Action() {	// [35] Loop = SYMBOLWHILE Condition.condition SYMBOLDO Statement.statement
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_condition = _symbols[offset + 2];
					final yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.Condition> condition = (yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.Condition>) _symbol_condition.value;
					final Symbol _symbol_statement = _symbols[offset + 4];
					final yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.Statement> statement = (yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.Statement>) _symbol_statement.value;
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.robot.karel.model.statement.Loop(condition.getWrappedObject(), statement.getWrappedObject()), (Object)condition.getWrappedObject(), statement.getWrappedObject()));
				}
			},
			new Action() {	// [36] AnyBeepersInBeeperBag = SYMBOLANY_45_BEEPERS_45_IN_45_BEEPER_45_BAG
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.robot.karel.model.condition.beeper.AnyBeepersInBeeperBag()));
				}
			},
			new Action() {	// [37] FacingWest = SYMBOLFACING_45_WEST
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.robot.karel.model.condition.facing.FacingWest()));
				}
			},
			new Action() {	// [38] PickBeeper = SYMBOLPICKBEEPER
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.robot.karel.model.instruction.PickBeeper()));
				}
			},
			new Action() {	// [39] FacingSouth = SYMBOLFACING_45_SOUTH
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.robot.karel.model.condition.facing.FacingSouth()));
				}
			},
			new Action() {	// [40] PutBeeper = SYMBOLPUTBEEPER
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.robot.karel.model.instruction.PutBeeper()));
				}
			},
			new Action() {	// [41] TurnLeft = SYMBOLTURNLEFT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.robot.karel.model.instruction.TurnLeft()));
				}
			},
			new Action() {	// [42] TurnOff = SYMBOLTURNOFF
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.robot.karel.model.instruction.TurnOff()));
				}
			},
			new Action() {	// [43] DefinitionArray1 = DefinitionArray1.list Definition.elem
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.parser.beaver.SymbolListImpl<yajco.robot.karel.model.Definition>> list = (yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.parser.beaver.SymbolListImpl<yajco.robot.karel.model.Definition>>) _symbol_list.value;
					final Symbol _symbol_elem = _symbols[offset + 2];
					final yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.Definition> elem = (yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.Definition>) _symbol_elem.value;
					 list.getWrappedObject().add(elem.getWrappedObject()); return (Symbol) new SymbolWrapper(list.getWrappedObject());
				}
			},
			new Action() {	// [44] DefinitionArray1 = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return (Symbol) new SymbolWrapper(new SymbolListImpl<yajco.robot.karel.model.Definition>());
				}
			},
			new Action() {	// [45] Obstacle = BackIsBlocked.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.condition.obstacle.BackIsBlocked> val = (yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.condition.obstacle.BackIsBlocked>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			},
			new Action() {	// [46] Obstacle = FrontIsBlocked.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.condition.obstacle.FrontIsBlocked> val = (yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.condition.obstacle.FrontIsBlocked>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			},
			new Action() {	// [47] Obstacle = RightIsClear.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.condition.obstacle.RightIsClear> val = (yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.condition.obstacle.RightIsClear>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			},
			new Action() {	// [48] Obstacle = BackIsClear.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.condition.obstacle.BackIsClear> val = (yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.condition.obstacle.BackIsClear>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			},
			new Action() {	// [49] Obstacle = FrontIsClear.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.condition.obstacle.FrontIsClear> val = (yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.condition.obstacle.FrontIsClear>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			},
			new Action() {	// [50] Obstacle = LeftIsBlocked.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.condition.obstacle.LeftIsBlocked> val = (yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.condition.obstacle.LeftIsBlocked>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			},
			new Action() {	// [51] Obstacle = RightIsBlocked.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.condition.obstacle.RightIsBlocked> val = (yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.condition.obstacle.RightIsBlocked>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			},
			new Action() {	// [52] Obstacle = LeftIsClear.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.condition.obstacle.LeftIsClear> val = (yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.condition.obstacle.LeftIsClear>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			},
			new Action() {	// [53] Facing = NotFacingEast.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.condition.facing.NotFacingEast> val = (yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.condition.facing.NotFacingEast>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			},
			new Action() {	// [54] Facing = NotFacingNorth.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.condition.facing.NotFacingNorth> val = (yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.condition.facing.NotFacingNorth>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			},
			new Action() {	// [55] Facing = FacingSouth.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.condition.facing.FacingSouth> val = (yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.condition.facing.FacingSouth>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			},
			new Action() {	// [56] Facing = FacingNorth.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.condition.facing.FacingNorth> val = (yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.condition.facing.FacingNorth>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			},
			new Action() {	// [57] Facing = NotFacingWest.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.condition.facing.NotFacingWest> val = (yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.condition.facing.NotFacingWest>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			},
			new Action() {	// [58] Facing = FacingEast.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.condition.facing.FacingEast> val = (yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.condition.facing.FacingEast>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			},
			new Action() {	// [59] Facing = NotFacingSouth.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.condition.facing.NotFacingSouth> val = (yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.condition.facing.NotFacingSouth>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			},
			new Action() {	// [60] Facing = FacingWest.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.condition.facing.FacingWest> val = (yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.condition.facing.FacingWest>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			},
			new Action() {	// [61] FacingNorth = SYMBOLFACING_45_NORTH
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.robot.karel.model.condition.facing.FacingNorth()));
				}
			},
			new Action() {	// [62] FacingEast = SYMBOLFACING_45_EAST
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.robot.karel.model.condition.facing.FacingEast()));
				}
			},
			new Action() {	// [63] Iteration = SYMBOLITERATE VALUE.value SYMBOLTIMES Statement.statement
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_value = _symbols[offset + 2];
					final java.lang.String value = (java.lang.String) _symbol_value.value;
					final Symbol _symbol_statement = _symbols[offset + 4];
					final yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.Statement> statement = (yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.Statement>) _symbol_statement.value;
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.robot.karel.model.statement.Iteration(java.lang.Integer.valueOf(value), statement.getWrappedObject()), (Object)java.lang.Integer.valueOf(value), statement.getWrappedObject()));
				}
			},
			new Action() {	// [64] RightIsBlocked = SYMBOLRIGHT_45_IS_45_BLOCKED
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.robot.karel.model.condition.obstacle.RightIsBlocked()));
				}
			},
			new Action() {	// [65] Instruction = PickBeeper.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.instruction.PickBeeper> val = (yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.instruction.PickBeeper>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			},
			new Action() {	// [66] Instruction = TurnLeft.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.instruction.TurnLeft> val = (yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.instruction.TurnLeft>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			},
			new Action() {	// [67] Instruction = Call.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.instruction.Call> val = (yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.instruction.Call>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			},
			new Action() {	// [68] Instruction = Move.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.instruction.Move> val = (yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.instruction.Move>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			},
			new Action() {	// [69] Instruction = TurnOff.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.instruction.TurnOff> val = (yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.instruction.TurnOff>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			},
			new Action() {	// [70] Instruction = PutBeeper.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.instruction.PutBeeper> val = (yajco.robot.karel.parser.beaver.SymbolWrapper<yajco.robot.karel.model.instruction.PutBeeper>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			}
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}

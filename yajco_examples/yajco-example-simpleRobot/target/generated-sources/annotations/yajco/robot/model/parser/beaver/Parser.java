package yajco.robot.model.parser.beaver;

import yajco.robot.model.parser.beaver.SymbolListImpl;
import beaver.*;
import yajco.robot.model.parser.beaver.SymbolWrapper;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "grammar.grammar".
 */
public class Parser extends beaver.Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short SYMBOLBEGIN = 1;
		static public final short SYMBOLEND = 2;
		static public final short SYMBOLMOVE = 3;
		static public final short SYMBOLturn_45_left = 4;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9njZjiEW308G#lctEMh$MnlMotAav6ad413A826X8g26Gio0ZT47WY8lYcOv2TOjVK1af7" +
		"ayBaQlp9VY6B$y$ssMUCfNT9WvqvgzNvUN4c9B4DLhgovtI7M8vK=");

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			new Action() {	// [0] Move = SYMBOLMOVE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.robot.model.Move()));
				}
			},
			new Action() {	// [1] Command = TurnLeft.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final yajco.robot.model.parser.beaver.SymbolWrapper<yajco.robot.model.TurnLeft> val = (yajco.robot.model.parser.beaver.SymbolWrapper<yajco.robot.model.TurnLeft>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			},
			new Action() {	// [2] Command = Move.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final yajco.robot.model.parser.beaver.SymbolWrapper<yajco.robot.model.Move> val = (yajco.robot.model.parser.beaver.SymbolWrapper<yajco.robot.model.Move>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			},
			new Action() {	// [3] CommandArray1 = CommandArray1.list Command.elem
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final yajco.robot.model.parser.beaver.SymbolWrapper<yajco.robot.model.parser.beaver.SymbolListImpl<yajco.robot.model.Command>> list = (yajco.robot.model.parser.beaver.SymbolWrapper<yajco.robot.model.parser.beaver.SymbolListImpl<yajco.robot.model.Command>>) _symbol_list.value;
					final Symbol _symbol_elem = _symbols[offset + 2];
					final yajco.robot.model.parser.beaver.SymbolWrapper<yajco.robot.model.Command> elem = (yajco.robot.model.parser.beaver.SymbolWrapper<yajco.robot.model.Command>) _symbol_elem.value;
					 list.getWrappedObject().add(elem.getWrappedObject()); return (Symbol) new SymbolWrapper(list.getWrappedObject());
				}
			},
			new Action() {	// [4] CommandArray1 = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return (Symbol) new SymbolWrapper(new SymbolListImpl<yajco.robot.model.Command>());
				}
			},
			new Action() {	// [5] Robot = SYMBOLBEGIN CommandArray1.commands SYMBOLEND
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_commands = _symbols[offset + 2];
					final yajco.robot.model.parser.beaver.SymbolWrapper<yajco.robot.model.parser.beaver.SymbolListImpl<yajco.robot.model.Command>> commands = (yajco.robot.model.parser.beaver.SymbolWrapper<yajco.robot.model.parser.beaver.SymbolListImpl<yajco.robot.model.Command>>) _symbol_commands.value;
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.robot.model.Robot(new java.util.ArrayList<yajco.robot.model.Command>(commands.getWrappedObject())), (Object)new java.util.ArrayList<yajco.robot.model.Command>(commands.getWrappedObject())));
				}
			},
			new Action() {	// [6] TurnLeft = SYMBOLturn_45_left
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.robot.model.TurnLeft()));
				}
			}
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
